"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[614],{3905:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return d}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=t.createContext({}),p=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},m=function(e){var n=p(e.components);return t.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,f=c["".concat(i,".").concat(d)]||c[d]||u[d]||l;return a?t.createElement(f,s(s({ref:n},m),{},{components:a})):t.createElement(f,s({ref:n},m))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=c;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=a[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},156:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var t=a(7462),r=a(3366),l=(a(7294),a(3905)),s=["components"],o={},i="Installing custom maps",p={unversionedId:"map-arena-files",id:"map-arena-files",isDocsHomePage:!1,title:"Installing custom maps",description:"In order to get custom maps in map select, you must install maps inside your /usermaps/. Inside usermaps, each map folder should lay there.",source:"@site/docs/map-arena-files.md",sourceDirName:".",slug:"/map-arena-files",permalink:"/map-arena-files",editUrl:"https://github.com/h1-mod/docs/blob/main/docs/map-arena-files.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Map Porting (S1 -> H1 <- H2)",permalink:"/map-porting-s1"},next:{title:"Ranked Multiplayer",permalink:"/ranked"}},m=[{value:"Usermap folder structure",id:"usermap-folder-structure",children:[],level:2},{value:"Loadscreen",id:"loadscreen",children:[],level:2},{value:"Arena files &amp; Map Select",id:"arena-files--map-select",children:[],level:2}],u={toc:m};function c(e){var n=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"installing-custom-maps"},"Installing custom maps"),(0,l.kt)("p",null,"In order to get custom maps in map select, you must install maps inside your ",(0,l.kt)("inlineCode",{parentName:"p"},"<MWR directory>/usermaps/"),". Inside ",(0,l.kt)("inlineCode",{parentName:"p"},"usermaps"),", each map folder should lay there."),(0,l.kt)("p",null,"Call of Duty: Modern Warfare Remastered\\\n| - usermaps\\"),(0,l.kt)("p",null,"usermaps\\\n| - mp_favela\\\n| - mp_streamline\\\n| - mp_terminal\\"),(0,l.kt)("h2",{id:"usermap-folder-structure"},"Usermap folder structure"),(0,l.kt)("p",null,"The structure of a usermap folder should had a map fastfile, a map load fastfile, and a arena file. Some maps might also have a .pak file, which is used for extra assets that are big."),(0,l.kt)("p",null,"mp_favela\\\n| - mp_favela.ff\n| - mp_favela_load.ff\n| - mp_favela.pak\n| - mp_favela.arena"),(0,l.kt)("h2",{id:"loadscreen"},"Loadscreen"),(0,l.kt)("p",null,"A loadscreen fastfile is a ",(0,l.kt)("inlineCode",{parentName:"p"},"<map>_load.ff")," that is included in the specific usermap's folder. To build a load fastfile, you simply need the following in your map load's CSV:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"techset,,2d\nmaterial,,$victorybackdrop\nmaterial,,$defeatbackdrop\nimage,loadscreen_mp_streamline\nmaterial,$levelbriefing\nmaterial,$levelbriefingcrossfade\n")),(0,l.kt)("p",null,"The loadscreen image can be whatever you want, but should be the size of this image below:"),(0,l.kt)("img",{src:"img/loadscreen.png"}),(0,l.kt)("p",null,"For the loadscren materials ",(0,l.kt)("strong",{parentName:"p"},"$levelbriefing")," and ",(0,l.kt)("strong",{parentName:"p"},"$levelbriefingcrossfade"),", you just simply need to build these in and change the image in the textureTable. These materials are created as json files, and go in ",(0,l.kt)("inlineCode",{parentName:"p"},"<MWR>/zonetool/<map>_load/materials/"),". Your image can go in here, or it can go in ",(0,l.kt)("inlineCode",{parentName:"p"},"<MWR>/zonetool/images/"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "$levelbriefing",\n    "techniqueSet->name": "2d",\n    "gameFlags": 0,\n    "sortKey": 60,\n    "renderFlags": 0,\n    "textureAtlasRowCount": 1,\n    "textureAtlasColumnCount": 1,\n    "textureAtlasFrameBlend": 0,\n    "textureAtlasAsArray": 0,\n    "surfaceTypeBits": 0,\n    "cameraRegion": 12,\n    "materialType": 0,\n    "assetFlags": 0,\n    "constantTable": null,\n    "textureTable": [\n        {\n            "image": "loadscreen_trainer",\n            "semantic": 0,\n            "samplerState": 226,\n            "lastCharacter": 112,\n            "firstCharacter": 99,\n            "typeHash": 2695565377\n        }\n    ]\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "$levelbriefingcrossfade",\n    "techniqueSet->name": "2d",\n    "gameFlags": 0,\n    "sortKey": 60,\n    "renderFlags": 0,\n    "textureAtlasRowCount": 1,\n    "textureAtlasColumnCount": 1,\n    "textureAtlasFrameBlend": 0,\n    "textureAtlasAsArray": 0,\n    "surfaceTypeBits": 0,\n    "cameraRegion": 12,\n    "materialType": 0,\n    "assetFlags": 0,\n    "constantTable": null,\n    "textureTable": [\n        {\n            "image": "loadscreen_trainer",\n            "semantic": 0,\n            "samplerState": 226,\n            "lastCharacter": 112,\n            "firstCharacter": 99,\n            "typeHash": 2695565377\n        }\n    ]\n}\n')),(0,l.kt)("h2",{id:"arena-files--map-select"},"Arena files & Map Select"),(0,l.kt)("p",null,"To write arena files, it ",(0,l.kt)("strong",{parentName:"p"},"must")," be written in this format below. Make sure not to forget any quotes or any characters. Only text should be changed, and you don't ",(0,l.kt)("em",{parentName:"p"},"have")," to have localized strings since it's not gonna hurt anything in the long run."),(0,l.kt)("p",null,"Arena file example here:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-arena"},'{\n    map         "mp_streamline"\n    longname    "MPUI_STREAMLINE"\n    gametype    "dm war dom conf sd hp sr twar infect ball"\n    description "MPUI_DESC_MAP_STREAMLINE"\n    mapimage    "loadscreen_mp_streamline"\n    mapoverlay  "compass_overlay_map_blank"\n    allieschar  "marines"\n    axischar    "opfor"\n    environment "urban"\n    mappack     "0"\n}\n')))}c.isMDXComponent=!0}}]);