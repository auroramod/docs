"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[723],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=i,g=d["".concat(s,".").concat(f)]||d[f]||u[f]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8671:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],c={},s="GSC scripting",l={unversionedId:"gsc-scripting",id:"gsc-scripting",isDocsHomePage:!1,title:"GSC scripting",description:"Introduction to GSC scripting",source:"@site/docs/gsc-scripting.md",sourceDirName:".",slug:"/gsc-scripting",permalink:"/gsc-scripting",editUrl:"https://github.com/h1-mod/docs/blob/main/docs/gsc-scripting.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Port Forwarding",permalink:"/port-forwarding"},next:{title:"Loading a GSC script",permalink:"/gsc-load-script"}},p=[{value:"Introduction to GSC scripting",id:"introduction-to-gsc-scripting",children:[],level:2},{value:"Writing a basic script",id:"writing-a-basic-script",children:[],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gsc-scripting"},"GSC scripting"),(0,a.kt)("h2",{id:"introduction-to-gsc-scripting"},"Introduction to GSC scripting"),(0,a.kt)("p",null,"GSC is a derivative of the 'C' programming language, but made easy for doing gameplay-related stuff. If you understand C or C++, then GSC will come familiar to you. And if you don't know know any other programming languages - don't worry! GSC is made to be easy."),(0,a.kt)("p",null,"Before learning about the language and writing it, read up on ",(0,a.kt)("a",{parentName:"p",href:"/gsc-load-script"},"how to load a GSC script"),"."),(0,a.kt)("h2",{id:"writing-a-basic-script"},"Writing a basic script"),(0,a.kt)("p",null,"In this little tutorial, we are going to write a simple GSC script that will count the amount of spawns on a player and do a print to the console."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'init()\n{\n    level thread on_player_connected();\n}\n\non_player_connected()\n{\n    level endon("game_ended");\n\n    for(;;)\n    {\n        level waittill("connected", player); // this notify will run EVERY TIME a new player has connected\n        player thread on_player_spawned();\n    }\n}\n\non_player_spawned()\n{\n    self endon("disconnect");\n    level endon("game_ended");\n\n    self.spawns = 0; // we setup a new variable to keep count of spawns on the player entity\n\n    for(;;)\n    {\n        self waittill("spawned_player"); // this notify will run EVERY TIME the player has spawned\n\n        self.spawns += 1; // we add 1 to this variable everytime the player spawns\n \n        print(va("Player %s has spawned %s times!", self.name, self.spawns));\n    }\n}\n')),(0,a.kt)("p",null,"And after that, you have successfully made a basic GSC script. You can refer to ",(0,a.kt)("a",{parentName:"p",href:"gsc-scripting-syntax"},"GSC Syntax")," on the basics of GSC."))}d.isMDXComponent=!0}}]);